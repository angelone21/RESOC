package edu.cecar.vistas;

import edu.cecar.controladores.ControladorCliente;
import edu.cecar.controladores.ControladorImagen;
import edu.cecar.controladores.ControladorRenderizarCelda;
import edu.cecar.modelos.Amigo;
import edu.cecar.modelos.FiltroImagenes;
import edu.cecar.modelos.Perfil;
import edu.cecar.modelos.Publicacion;
import edu.cecar.modelos.SolicitudAmistad;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vincenzo Angelone
 */
public class VistaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    static ControladorCliente controladorCliente = new ControladorCliente();
    Perfil perfilAutenticado;
    ControladorImagen controladorImagen = new ControladorImagen();
    File imagen;

    public VistaPrincipal(int idUsuario) {
        Perfil perfil = controladorCliente.obtenerPerfil(idUsuario);
        initComponents();
        byte[] byteArray = perfil.getFotoPerfil(); //need to initialize it
        ImageIcon imageIcon = new ImageIcon(byteArray);
        imageIcon.getImage();
        Image img = imageIcon.getImage();
        Image newImg = img.getScaledInstance(label_imagen.getWidth(), label_imagen.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        label_fotoPerfil.setIcon(image);
        panel_perfil.setVisible(false);
        panel_amigos.setVisible(false);
        panel_publicaciones.setVisible(false);
        panel_crearPublicacion.setVisible(false);
        panel_solicitudes.setVisible(false);
        panel_enviarSolicitud.setVisible(false);
        label_nombres.setText(perfil.getNombres());
        label_apellidos.setText(perfil.getApellidos());
        perfilAutenticado = perfil;
        bt_guardarCambios.setVisible(false);
        bt_cambiarfoto.setVisible(false);
        String path = System.getProperty("user.dir");
        Image icon = Toolkit.getDefaultToolkit().getImage(path + "\\src\\main\\resources\\icono_gorest.png");
        this.setIconImage(icon);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_botones = new javax.swing.JPanel();
        bt_perfil = new javax.swing.JButton();
        bt_amigos = new javax.swing.JButton();
        bt_chat = new javax.swing.JButton();
        bt_publicaciones = new javax.swing.JButton();
        label_apellidos = new javax.swing.JLabel();
        label_nombres = new javax.swing.JLabel();
        bt_crearPublicacion = new javax.swing.JButton();
        bt_solicitudes = new javax.swing.JButton();
        bt_EnviarSolicitud = new javax.swing.JButton();
        label_fotoPerfil = new javax.swing.JLabel();
        panel_perfil = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        area_descripcion = new javax.swing.JTextArea();
        label_descripcion = new javax.swing.JLabel();
        txt_celular = new javax.swing.JTextField();
        label_celular = new javax.swing.JLabel();
        box_departamento = new javax.swing.JComboBox<>();
        label_departamento = new javax.swing.JLabel();
        fecha_nacimiento = new com.toedter.calendar.JDateChooser();
        label_fechaNacimiento = new javax.swing.JLabel();
        box_sexo = new javax.swing.JComboBox<>();
        label_sexo = new javax.swing.JLabel();
        txt_apellidos = new javax.swing.JTextField();
        label_apellidos1 = new javax.swing.JLabel();
        txt_nombres = new javax.swing.JTextField();
        label_nombres1 = new javax.swing.JLabel();
        pass_password = new javax.swing.JPasswordField();
        label_password = new javax.swing.JLabel();
        txt_idUsuario = new javax.swing.JTextField();
        labe_cedula = new javax.swing.JLabel();
        bt_actualizarDatos = new javax.swing.JButton();
        bt_eliminarPerfil = new javax.swing.JButton();
        bt_guardarCambios = new javax.swing.JButton();
        bt_mostrarPassword = new javax.swing.JButton();
        label_lista_amigos1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_publicaciones = new javax.swing.JTable();
        bt_publica = new javax.swing.JButton();
        bt_privada = new javax.swing.JButton();
        bt_megusta = new javax.swing.JButton();
        bt_nomegusta = new javax.swing.JButton();
        label_fotoPerfil_perfil = new javax.swing.JLabel();
        bt_cambiarfoto = new javax.swing.JButton();
        bt_eliminarPublicacion = new javax.swing.JButton();
        panel_amigos = new javax.swing.JPanel();
        label_amigos = new javax.swing.JLabel();
        label_lista_amigos = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_listaAmigos = new javax.swing.JTable();
        bt_Bloquear = new javax.swing.JButton();
        bt_activar = new javax.swing.JButton();
        panel_publicaciones = new javax.swing.JPanel();
        bt_nomegusta1 = new javax.swing.JButton();
        bt_megusta1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabla_panel_publicaciones = new javax.swing.JTable();
        label_lista_amigos2 = new javax.swing.JLabel();
        panel_crearPublicacion = new javax.swing.JPanel();
        label_crearPublicacion = new javax.swing.JLabel();
        label_texto = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        area_texto = new javax.swing.JTextArea();
        bt_crear = new javax.swing.JButton();
        label_textoImagen = new javax.swing.JLabel();
        label_imagen = new javax.swing.JLabel();
        bt_abrirFileChooser = new javax.swing.JButton();
        label_texto1 = new javax.swing.JLabel();
        txt_fechaPublicacion = new javax.swing.JTextField();
        label_texto2 = new javax.swing.JLabel();
        box_tipoPublicacion = new javax.swing.JComboBox<>();
        panel_solicitudes = new javax.swing.JPanel();
        label_solicitudes = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabla_solicitudes = new javax.swing.JTable();
        bt_aceptarSolicitud = new javax.swing.JButton();
        bt_rechazarSolicitud = new javax.swing.JButton();
        label_solicitudes2 = new javax.swing.JLabel();
        panel_enviarSolicitud = new javax.swing.JPanel();
        txt_idUsuarioSolicitud = new javax.swing.JTextField();
        label_enviarSolicitud = new javax.swing.JLabel();
        bt_buscarPerfilSolicitud = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabla_enviar_solicitud = new javax.swing.JTable();
        label_enviarSolicitud1 = new javax.swing.JLabel();
        bt_enviarSolicitud = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tabla_publicacionesEnviarSolicitud = new javax.swing.JTable();
        label_lista_amigos3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_cerrarSesion = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_salir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RED SOCIAL CECAR");
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(Toolkit.getDefaultToolkit().getScreenSize());
        setResizable(false);
        getContentPane().setLayout(null);

        panel_botones.setBackground(new java.awt.Color(0, 102, 0));
        panel_botones.setPreferredSize(new java.awt.Dimension(125, 733));
        panel_botones.setLayout(null);

        bt_perfil.setText("Perfil");
        bt_perfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_perfilActionPerformed(evt);
            }
        });
        panel_botones.add(bt_perfil);
        bt_perfil.setBounds(20, 270, 152, 50);

        bt_amigos.setText("Amigos");
        bt_amigos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_amigosActionPerformed(evt);
            }
        });
        panel_botones.add(bt_amigos);
        bt_amigos.setBounds(20, 450, 152, 49);

        bt_chat.setText("Chat");
        bt_chat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_chatActionPerformed(evt);
            }
        });
        panel_botones.add(bt_chat);
        bt_chat.setBounds(20, 510, 152, 49);

        bt_publicaciones.setText("Publicaciones");
        bt_publicaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_publicacionesActionPerformed(evt);
            }
        });
        panel_botones.add(bt_publicaciones);
        bt_publicaciones.setBounds(20, 570, 152, 49);

        label_apellidos.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_apellidos.setForeground(new java.awt.Color(240, 240, 240));
        panel_botones.add(label_apellidos);
        label_apellidos.setBounds(22, 210, 160, 40);

        label_nombres.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_nombres.setForeground(new java.awt.Color(240, 240, 240));
        panel_botones.add(label_nombres);
        label_nombres.setBounds(22, 170, 160, 40);

        bt_crearPublicacion.setText("Crear Publicacion");
        bt_crearPublicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_crearPublicacionActionPerformed(evt);
            }
        });
        panel_botones.add(bt_crearPublicacion);
        bt_crearPublicacion.setBounds(20, 630, 150, 50);

        bt_solicitudes.setText("Solicitudes");
        bt_solicitudes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_solicitudesActionPerformed(evt);
            }
        });
        panel_botones.add(bt_solicitudes);
        bt_solicitudes.setBounds(20, 330, 150, 50);

        bt_EnviarSolicitud.setText("Enviar Solicitud");
        bt_EnviarSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_EnviarSolicitudActionPerformed(evt);
            }
        });
        panel_botones.add(bt_EnviarSolicitud);
        bt_EnviarSolicitud.setBounds(20, 390, 150, 50);
        panel_botones.add(label_fotoPerfil);
        label_fotoPerfil.setBounds(10, 20, 170, 140);

        getContentPane().add(panel_botones);
        panel_botones.setBounds(0, 0, 190, 1602);

        panel_perfil.setLayout(null);

        area_descripcion.setEditable(false);
        area_descripcion.setColumns(20);
        area_descripcion.setRows(5);
        jScrollPane1.setViewportView(area_descripcion);

        panel_perfil.add(jScrollPane1);
        jScrollPane1.setBounds(160, 570, 210, 140);

        label_descripcion.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_descripcion.setText("Descripción:");
        panel_perfil.add(label_descripcion);
        label_descripcion.setBounds(30, 630, 100, 40);

        txt_celular.setEditable(false);
        txt_celular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_celularKeyPressed(evt);
            }
        });
        panel_perfil.add(txt_celular);
        txt_celular.setBounds(160, 520, 210, 40);

        label_celular.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_celular.setText("Número Celular:");
        panel_perfil.add(label_celular);
        label_celular.setBounds(30, 520, 120, 40);

        box_departamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sistemas", "Proyeccion Social", "Logística\t", "Financiera", "Compras", "Contabilidad", "Talento Humano", "Planificación Y Desarrollo" }));
        box_departamento.setEnabled(false);
        panel_perfil.add(box_departamento);
        box_departamento.setBounds(160, 470, 210, 40);

        label_departamento.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_departamento.setText("Departamento*:");
        panel_perfil.add(label_departamento);
        label_departamento.setBounds(30, 470, 130, 40);

        fecha_nacimiento.setEnabled(false);
        panel_perfil.add(fecha_nacimiento);
        fecha_nacimiento.setBounds(160, 420, 210, 40);

        label_fechaNacimiento.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_fechaNacimiento.setText("Fecha de Nacimiento*:");
        panel_perfil.add(label_fechaNacimiento);
        label_fechaNacimiento.setBounds(20, 420, 140, 40);

        box_sexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Femenino", "Otro" }));
        box_sexo.setEnabled(false);
        panel_perfil.add(box_sexo);
        box_sexo.setBounds(160, 370, 210, 40);

        label_sexo.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_sexo.setText("Sexo*:");
        panel_perfil.add(label_sexo);
        label_sexo.setBounds(60, 370, 90, 40);

        txt_apellidos.setEditable(false);
        txt_apellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_apellidosActionPerformed(evt);
            }
        });
        txt_apellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_apellidosKeyPressed(evt);
            }
        });
        panel_perfil.add(txt_apellidos);
        txt_apellidos.setBounds(160, 320, 210, 40);

        label_apellidos1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_apellidos1.setText("Apellidos*:");
        panel_perfil.add(label_apellidos1);
        label_apellidos1.setBounds(60, 320, 90, 40);

        txt_nombres.setEditable(false);
        txt_nombres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombresActionPerformed(evt);
            }
        });
        txt_nombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_nombresKeyPressed(evt);
            }
        });
        panel_perfil.add(txt_nombres);
        txt_nombres.setBounds(160, 270, 210, 40);

        label_nombres1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_nombres1.setText("Nombres*:");
        panel_perfil.add(label_nombres1);
        label_nombres1.setBounds(60, 270, 90, 40);

        pass_password.setEditable(false);
        pass_password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pass_passwordKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pass_passwordKeyTyped(evt);
            }
        });
        panel_perfil.add(pass_password);
        pass_password.setBounds(160, 220, 210, 40);

        label_password.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        label_password.setText("Contraseña*: ");
        panel_perfil.add(label_password);
        label_password.setBounds(60, 220, 90, 40);

        txt_idUsuario.setEditable(false);
        txt_idUsuario.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txt_idUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_idUsuarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_idUsuarioKeyTyped(evt);
            }
        });
        panel_perfil.add(txt_idUsuario);
        txt_idUsuario.setBounds(160, 170, 210, 40);

        labe_cedula.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        labe_cedula.setText("Cédula*:");
        panel_perfil.add(labe_cedula);
        labe_cedula.setBounds(60, 170, 90, 40);

        bt_actualizarDatos.setText("Actualizar Datos");
        bt_actualizarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_actualizarDatosActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_actualizarDatos);
        bt_actualizarDatos.setBounds(40, 760, 160, 60);

        bt_eliminarPerfil.setText("Eliminar Perfil");
        bt_eliminarPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_eliminarPerfilActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_eliminarPerfil);
        bt_eliminarPerfil.setBounds(230, 760, 170, 60);

        bt_guardarCambios.setText("Guardar Cambios");
        bt_guardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_guardarCambiosActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_guardarCambios);
        bt_guardarCambios.setBounds(40, 760, 160, 60);

        bt_mostrarPassword.setText("Ver");
        bt_mostrarPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bt_mostrarPasswordMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bt_mostrarPasswordMouseReleased(evt);
            }
        });
        panel_perfil.add(bt_mostrarPassword);
        bt_mostrarPassword.setBounds(380, 230, 49, 23);

        label_lista_amigos1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_lista_amigos1.setText("Lista de Publicaciones");
        panel_perfil.add(label_lista_amigos1);
        label_lista_amigos1.setBounds(890, 160, 220, 60);

        tabla_publicaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabla_publicaciones);

        panel_perfil.add(jScrollPane2);
        jScrollPane2.setBounds(450, 210, 1000, 490);

        bt_publica.setText("Publica");
        bt_publica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_publicaActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_publica);
        bt_publica.setBounds(830, 750, 150, 50);

        bt_privada.setText("Privada");
        bt_privada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_privadaActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_privada);
        bt_privada.setBounds(1000, 750, 150, 50);

        bt_megusta.setText("Me Gusta");
        bt_megusta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_megustaActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_megusta);
        bt_megusta.setBounds(830, 820, 150, 50);

        bt_nomegusta.setText("No Megusta");
        bt_nomegusta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_nomegustaActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_nomegusta);
        bt_nomegusta.setBounds(1000, 820, 150, 50);
        panel_perfil.add(label_fotoPerfil_perfil);
        label_fotoPerfil_perfil.setBounds(170, 10, 170, 140);

        bt_cambiarfoto.setText("Cambiar");
        bt_cambiarfoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cambiarfotoActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_cambiarfoto);
        bt_cambiarfoto.setBounds(370, 60, 80, 40);

        bt_eliminarPublicacion.setText("Eliminar");
        bt_eliminarPublicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_eliminarPublicacionActionPerformed(evt);
            }
        });
        panel_perfil.add(bt_eliminarPublicacion);
        bt_eliminarPublicacion.setBounds(930, 890, 130, 50);

        getContentPane().add(panel_perfil);
        panel_perfil.setBounds(190, 0, 1480, 1080);

        panel_amigos.setLayout(null);

        label_amigos.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_amigos.setText("AMIGOS");
        panel_amigos.add(label_amigos);
        label_amigos.setBounds(50, 30, 80, 70);

        label_lista_amigos.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_lista_amigos.setText("Lista de Amigos");
        panel_amigos.add(label_lista_amigos);
        label_lista_amigos.setBounds(460, 90, 170, 60);

        tabla_listaAmigos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_listaAmigos);

        panel_amigos.add(jScrollPane3);
        jScrollPane3.setBounds(20, 160, 1060, 500);

        bt_Bloquear.setText("Bloquear Amigo");
        bt_Bloquear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_BloquearActionPerformed(evt);
            }
        });
        panel_amigos.add(bt_Bloquear);
        bt_Bloquear.setBounds(580, 680, 120, 50);

        bt_activar.setText("Activar Amigo");
        bt_activar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_activarActionPerformed(evt);
            }
        });
        panel_amigos.add(bt_activar);
        bt_activar.setBounds(400, 680, 130, 50);

        getContentPane().add(panel_amigos);
        panel_amigos.setBounds(190, 0, 1150, 1080);

        panel_publicaciones.setLayout(null);

        bt_nomegusta1.setText("No Megusta");
        bt_nomegusta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_nomegusta1ActionPerformed(evt);
            }
        });
        panel_publicaciones.add(bt_nomegusta1);
        bt_nomegusta1.setBounds(540, 620, 150, 50);

        bt_megusta1.setText("Me Gusta");
        bt_megusta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_megusta1ActionPerformed(evt);
            }
        });
        panel_publicaciones.add(bt_megusta1);
        bt_megusta1.setBounds(380, 620, 150, 50);

        tabla_panel_publicaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tabla_panel_publicaciones);

        panel_publicaciones.add(jScrollPane6);
        jScrollPane6.setBounds(20, 100, 1000, 490);

        label_lista_amigos2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_lista_amigos2.setText("Lista de Publicaciones");
        panel_publicaciones.add(label_lista_amigos2);
        label_lista_amigos2.setBounds(410, 50, 220, 60);

        getContentPane().add(panel_publicaciones);
        panel_publicaciones.setBounds(190, 0, 1030, 1080);

        panel_crearPublicacion.setLayout(null);

        label_crearPublicacion.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_crearPublicacion.setText("CREAR PUBLICACION");
        panel_crearPublicacion.add(label_crearPublicacion);
        label_crearPublicacion.setBounds(50, 30, 190, 70);

        label_texto.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_texto.setText("Texto:");
        panel_crearPublicacion.add(label_texto);
        label_texto.setBounds(210, 230, 80, 30);

        area_texto.setColumns(20);
        area_texto.setRows(5);
        jScrollPane4.setViewportView(area_texto);

        panel_crearPublicacion.add(jScrollPane4);
        jScrollPane4.setBounds(310, 180, 350, 130);

        bt_crear.setText("Crear");
        bt_crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_crearActionPerformed(evt);
            }
        });
        panel_crearPublicacion.add(bt_crear);
        bt_crear.setBounds(410, 730, 110, 70);

        label_textoImagen.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_textoImagen.setText("Imagen:");
        panel_crearPublicacion.add(label_textoImagen);
        label_textoImagen.setBounds(210, 410, 80, 30);
        panel_crearPublicacion.add(label_imagen);
        label_imagen.setBounds(310, 340, 350, 160);

        bt_abrirFileChooser.setText("Abrir");
        bt_abrirFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_abrirFileChooserActionPerformed(evt);
            }
        });
        panel_crearPublicacion.add(bt_abrirFileChooser);
        bt_abrirFileChooser.setBounds(690, 410, 70, 40);

        label_texto1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_texto1.setText("Fecha de Publicación:");
        panel_crearPublicacion.add(label_texto1);
        label_texto1.setBounds(150, 570, 140, 30);

        txt_fechaPublicacion.setEditable(false);
        panel_crearPublicacion.add(txt_fechaPublicacion);
        txt_fechaPublicacion.setBounds(330, 570, 330, 30);

        label_texto2.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_texto2.setText("Tipo de Publicación:");
        panel_crearPublicacion.add(label_texto2);
        label_texto2.setBounds(150, 630, 140, 30);

        box_tipoPublicacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Publica", "Privada" }));
        panel_crearPublicacion.add(box_tipoPublicacion);
        box_tipoPublicacion.setBounds(330, 630, 330, 30);

        getContentPane().add(panel_crearPublicacion);
        panel_crearPublicacion.setBounds(190, 0, 1040, 1070);

        panel_solicitudes.setLayout(null);

        label_solicitudes.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_solicitudes.setText("SOLICITUDES");
        panel_solicitudes.add(label_solicitudes);
        label_solicitudes.setBounds(10, 30, 190, 70);

        tabla_solicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(tabla_solicitudes);

        panel_solicitudes.add(jScrollPane5);
        jScrollPane5.setBounds(60, 130, 910, 402);

        bt_aceptarSolicitud.setText("Aceptar");
        bt_aceptarSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_aceptarSolicitudActionPerformed(evt);
            }
        });
        panel_solicitudes.add(bt_aceptarSolicitud);
        bt_aceptarSolicitud.setBounds(400, 580, 120, 60);

        bt_rechazarSolicitud.setText("Rechazar");
        bt_rechazarSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_rechazarSolicitudActionPerformed(evt);
            }
        });
        panel_solicitudes.add(bt_rechazarSolicitud);
        bt_rechazarSolicitud.setBounds(590, 580, 120, 60);

        label_solicitudes2.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_solicitudes2.setText("LISTA DE SOLICITUDES DE AMISTAD");
        panel_solicitudes.add(label_solicitudes2);
        label_solicitudes2.setBounds(420, 50, 310, 70);

        getContentPane().add(panel_solicitudes);
        panel_solicitudes.setBounds(190, 0, 1020, 1080);

        panel_enviarSolicitud.setLayout(null);

        txt_idUsuarioSolicitud.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_idUsuarioSolicitudKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_idUsuarioSolicitudKeyTyped(evt);
            }
        });
        panel_enviarSolicitud.add(txt_idUsuarioSolicitud);
        txt_idUsuarioSolicitud.setBounds(420, 10, 140, 40);

        label_enviarSolicitud.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_enviarSolicitud.setText("ID USUARIO");
        panel_enviarSolicitud.add(label_enviarSolicitud);
        label_enviarSolicitud.setBounds(310, 10, 100, 40);

        bt_buscarPerfilSolicitud.setText("Buscar");
        bt_buscarPerfilSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_buscarPerfilSolicitudActionPerformed(evt);
            }
        });
        panel_enviarSolicitud.add(bt_buscarPerfilSolicitud);
        bt_buscarPerfilSolicitud.setBounds(590, 10, 90, 40);

        tabla_enviar_solicitud.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(tabla_enviar_solicitud);

        panel_enviarSolicitud.add(jScrollPane7);
        jScrollPane7.setBounds(80, 80, 900, 90);

        label_enviarSolicitud1.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_enviarSolicitud1.setText("ENVIAR SOLICITUD");
        panel_enviarSolicitud.add(label_enviarSolicitud1);
        label_enviarSolicitud1.setBounds(30, 10, 170, 60);

        bt_enviarSolicitud.setText("EnviarSolicitud");
        bt_enviarSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_enviarSolicitudActionPerformed(evt);
            }
        });
        panel_enviarSolicitud.add(bt_enviarSolicitud);
        bt_enviarSolicitud.setBounds(480, 190, 130, 50);

        tabla_publicacionesEnviarSolicitud.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(tabla_publicacionesEnviarSolicitud);

        panel_enviarSolicitud.add(jScrollPane8);
        jScrollPane8.setBounds(50, 310, 1000, 490);

        label_lista_amigos3.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        label_lista_amigos3.setText("Lista de Publicaciones");
        panel_enviarSolicitud.add(label_lista_amigos3);
        label_lista_amigos3.setBounds(440, 260, 220, 60);

        getContentPane().add(panel_enviarSolicitud);
        panel_enviarSolicitud.setBounds(190, 0, 1650, 1070);

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseline_settings_applications_black_18dp_1.png"))); // NOI18N
        jMenu1.setText("Opciones");

        menu_cerrarSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseline_exit_to_app_black_18dp_1.png"))); // NOI18N
        menu_cerrarSesion.setText("Cerrar Sesión");
        menu_cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_cerrarSesionActionPerformed(evt);
            }
        });
        jMenu1.add(menu_cerrarSesion);
        jMenu1.add(jSeparator1);

        menu_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseline_power_settings_new_black_18dp.png"))); // NOI18N
        menu_salir.setText("Salir");
        menu_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_salirActionPerformed(evt);
            }
        });
        jMenu1.add(menu_salir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);
    }// </editor-fold>//GEN-END:initComponents

    private void bt_amigosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_amigosActionPerformed
        // TODO add your handling code here:
        ArrayList<Amigo> amigos = new ArrayList<Amigo>();
        amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
        ArrayList<Perfil> listaAmigos = new ArrayList<Perfil>();
        amigos.stream().forEach((a) -> {
            Perfil perfil = controladorCliente.obtenerPerfil(a.getIdperfilAmigo());
            listaAmigos.add(perfil);
        });
        panel_amigos.setVisible(true);
        panel_perfil.setVisible(false);
        panel_crearPublicacion.setVisible(false);
        panel_publicaciones.setVisible(false);
        panel_solicitudes.setVisible(false);
        panel_enviarSolicitud.setVisible(false);
        DefaultTableModel modeloTablaAmigos = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        modeloTablaAmigos.addColumn("ID");
        modeloTablaAmigos.addColumn("Nombres");
        modeloTablaAmigos.addColumn("Apellidos");
        modeloTablaAmigos.addColumn("Departamento");
        modeloTablaAmigos.addColumn("Estado");
        Object datosAmigos[] = new Object[5];
        for (int i = 0; i < listaAmigos.size(); i++) {
            datosAmigos[0] = listaAmigos.get(i).getIdusario();
            datosAmigos[1] = listaAmigos.get(i).getNombres();
            datosAmigos[2] = listaAmigos.get(i).getApellidos();
            datosAmigos[3] = listaAmigos.get(i).getDepartamento();
            datosAmigos[4] = amigos.get(i).getEstado();
            modeloTablaAmigos.addRow(datosAmigos);
        }
        tabla_listaAmigos.setModel(modeloTablaAmigos);
    }//GEN-LAST:event_bt_amigosActionPerformed

    private void bt_perfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_perfilActionPerformed
        // TODO add your handling code here:
        panel_enviarSolicitud.setVisible(false);
        panel_solicitudes.setVisible(false);
        pass_password.setEditable(false);
        txt_nombres.setEditable(false);
        txt_apellidos.setEditable(false);
        box_sexo.setEnabled(false);
        bt_mostrarPassword.setVisible(false);
        fecha_nacimiento.setEnabled(false);
        box_departamento.setEnabled(false);
        area_descripcion.setEditable(false);
        txt_celular.setEditable(false);
        bt_guardarCambios.setVisible(false);
        panel_perfil.setVisible(true);
        panel_crearPublicacion.setVisible(false);
        panel_publicaciones.setVisible(false);
        panel_amigos.setVisible(false);
        bt_guardarCambios.setVisible(false);
        bt_actualizarDatos.setVisible(true);
        byte[] byteArray = perfilAutenticado.getFotoPerfil(); //need to initialize it
        ImageIcon imageIcon = new ImageIcon(byteArray);
        imageIcon.getImage();
        Image img = imageIcon.getImage();
        Image newImg = img.getScaledInstance(label_imagen.getWidth(), label_imagen.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon imagen = new ImageIcon(newImg);
        label_fotoPerfil_perfil.setIcon(imagen);
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
        DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        modeloTablaPublicaciones.addColumn("Texto");
        modeloTablaPublicaciones.addColumn("Multimedia");
        modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
        modeloTablaPublicaciones.addColumn("Tipo");
        modeloTablaPublicaciones.addColumn("Me gusta");
        modeloTablaPublicaciones.addColumn("No me gusta");
        tabla_publicaciones.setModel(modeloTablaPublicaciones);
        tabla_publicaciones.setRowHeight(120);
        tabla_publicaciones.getColumnModel().getColumn(1).setPreferredWidth(150);
        Object datosPublicacion[] = new Object[6];
        for (int i = 0; i < publicaciones.size(); i++) {
            try {
                datosPublicacion[0] = publicaciones.get(i).getTexto();
                Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones.get(i).getMultimedia());
                ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                Image image = icon.getImage();
                image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                ImageIcon icono = new ImageIcon(image);
                tabla_publicaciones.getColumnModel().getColumn(1).setCellRenderer(new ControladorRenderizarCelda());
                datosPublicacion[1] = icono;
                datosPublicacion[2] = publicaciones.get(i).getFechapublicacion();
                datosPublicacion[3] = publicaciones.get(i).getTipopublicacion();
                datosPublicacion[4] = publicaciones.get(i).getMegusta();
                datosPublicacion[5] = publicaciones.get(i).getNomegusta();
                modeloTablaPublicaciones.addRow(datosPublicacion);
            } catch (Exception ex) {
                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        txt_idUsuario.setText(perfilAutenticado.getIdusario() + "");
        pass_password.setText(perfilAutenticado.getPassword());
        txt_nombres.setText(perfilAutenticado.getNombres());
        txt_apellidos.setText(perfilAutenticado.getApellidos());
        box_sexo.setSelectedItem(perfilAutenticado.getSexo());
        fecha_nacimiento.setDate(perfilAutenticado.getFechanacimiento());
        box_departamento.setSelectedItem(perfilAutenticado.getDepartamento());
        area_descripcion.setText(perfilAutenticado.getDescripcion());
        txt_celular.setText(perfilAutenticado.getCelular() + "");
    }//GEN-LAST:event_bt_perfilActionPerformed

    private void menu_cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_cerrarSesionActionPerformed
        // TODO add your handling code here:
        dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaLogPanel().setVisible(true);
            }
        });
    }//GEN-LAST:event_menu_cerrarSesionActionPerformed

    private void menu_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_salirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_menu_salirActionPerformed

    private void txt_celularKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_celularKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txt_celularKeyPressed

    private void txt_apellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_apellidosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_apellidosActionPerformed

    private void txt_apellidosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_apellidosKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txt_apellidosKeyPressed

    private void txt_nombresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombresActionPerformed

    private void txt_nombresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombresKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombresKeyPressed

    private void pass_passwordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_passwordKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_pass_passwordKeyPressed

    private void pass_passwordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_passwordKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar()) && !Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_pass_passwordKeyTyped

    private void txt_idUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_idUsuarioKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_idUsuarioKeyPressed

    private void txt_idUsuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_idUsuarioKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_idUsuarioKeyTyped

    private void bt_actualizarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_actualizarDatosActionPerformed
        // TODO add your handling code here:
        bt_cambiarfoto.setVisible(true);
        pass_password.setEditable(true);
        txt_nombres.setEditable(true);
        txt_apellidos.setEditable(true);
        box_sexo.setEnabled(true);
        fecha_nacimiento.setEnabled(true);
        box_departamento.setEnabled(true);
        area_descripcion.setEditable(true);
        txt_celular.setEditable(true);
        bt_guardarCambios.setVisible(true);
        bt_actualizarDatos.setVisible(false);
        bt_mostrarPassword.setVisible(true);
    }//GEN-LAST:event_bt_actualizarDatosActionPerformed

    private void bt_guardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_guardarCambiosActionPerformed
        // TODO add your handling code here:
        if (txt_idUsuario.getText().equals("") == false && txt_nombres.getText().equals("") == false && txt_apellidos.getText().equals("") == false && pass_password.getText().equals("") == false) {
            Perfil perfil_actualizar = new Perfil();
            perfil_actualizar.setIdusario(Integer.parseInt(txt_idUsuario.getText()));
            perfil_actualizar.setPassword(pass_password.getText());
            perfil_actualizar.setNombres(txt_nombres.getText());
            perfil_actualizar.setApellidos(txt_apellidos.getText());
            perfil_actualizar.setSexo(box_sexo.getSelectedItem().toString());
            java.sql.Date fechasql = new java.sql.Date(fecha_nacimiento.getDate().getTime());
            perfil_actualizar.setFechanacimiento(fechasql);
            perfil_actualizar.setDepartamento(box_departamento.getSelectedItem().toString());
            if (txt_celular.getText().equals("") == false) {
                perfil_actualizar.setCelular(Long.parseLong(txt_celular.getText()));
            }
            if (area_descripcion.getText().equals("") == false) {
                perfil_actualizar.setDescripcion(area_descripcion.getText());
            } else {
                perfil_actualizar.setDescripcion(null);
            }
            byte[] bytes = null;
            try {
                FileInputStream fis = new FileInputStream(imagen);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for (int i; (i = fis.read(buf)) != -1;) {
                    bos.write(buf, 0, i);
                }
                bytes = bos.toByteArray();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            perfil_actualizar.setFotoPerfil(bytes);
            if (controladorCliente.PeticionClientePerfil("actualizarPerfil", perfil_actualizar) == true) {
                JOptionPane.showMessageDialog(null, "Perfil actualizado correctamente!");
                perfilAutenticado = perfil_actualizar;
                pass_password.setEditable(false);
                txt_nombres.setEditable(false);
                txt_apellidos.setEditable(false);
                box_sexo.setEnabled(false);
                fecha_nacimiento.setEnabled(false);
                box_departamento.setEnabled(false);
                area_descripcion.setEditable(false);
                txt_celular.setEditable(false);
                bt_guardarCambios.setVisible(false);
                bt_actualizarDatos.setVisible(true);
                bt_mostrarPassword.setVisible(false);
                bt_cambiarfoto.setVisible(false);
                label_nombres.setText(perfilAutenticado.getNombres());
                label_apellidos.setText(perfilAutenticado.getApellidos());
                byte[] byteArray = perfilAutenticado.getFotoPerfil(); //need to initialize it
                ImageIcon imageIcon = new ImageIcon(byteArray);
                imageIcon.getImage();
                Image img = imageIcon.getImage();
                Image newImg = img.getScaledInstance(label_imagen.getWidth(), label_imagen.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon imagen = new ImageIcon(newImg);
                label_fotoPerfil_perfil.setIcon(imagen);
                label_fotoPerfil.setIcon(imagen);
            } else {
                JOptionPane.showMessageDialog(null, "Datos erroneos o incompletos");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Datos obligatorios faltantes!");
        }

    }//GEN-LAST:event_bt_guardarCambiosActionPerformed

    private void bt_mostrarPasswordMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_mostrarPasswordMousePressed
        // TODO add your handling code here:
        pass_password.setEchoChar((char) 0);

    }//GEN-LAST:event_bt_mostrarPasswordMousePressed

    private void bt_mostrarPasswordMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_mostrarPasswordMouseReleased
        // TODO add your handling code here:
        pass_password.setEchoChar('*');
    }//GEN-LAST:event_bt_mostrarPasswordMouseReleased

    private void bt_eliminarPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_eliminarPerfilActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_bt_eliminarPerfilActionPerformed

    private void bt_BloquearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_BloquearActionPerformed
        // TODO add your handling code here:
        int row = tabla_listaAmigos.getSelectedRow();
        Amigo amigo = new Amigo(perfilAutenticado.getIdusario(), Integer.parseInt(tabla_listaAmigos.getValueAt(row, 0).toString()), "Bloqueado");
        if (controladorCliente.PeticionClienteAmigo("estadoAmigo", amigo) == true) {
            ArrayList<Amigo> amigos = new ArrayList<Amigo>();
            amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
            ArrayList<Perfil> listaAmigos = new ArrayList<Perfil>();
            amigos.stream().forEach((a) -> {
                Perfil perfil = controladorCliente.obtenerPerfil(a.getIdperfilAmigo());
                listaAmigos.add(perfil);
            });
            panel_amigos.setVisible(true);
            panel_perfil.setVisible(false);
            DefaultTableModel modeloTablaAmigos = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaAmigos.addColumn("ID");
            modeloTablaAmigos.addColumn("Nombres");
            modeloTablaAmigos.addColumn("Apellidos");
            modeloTablaAmigos.addColumn("Departamento");
            modeloTablaAmigos.addColumn("Estado");
            Object datosAmigos[] = new Object[5];
            for (int i = 0; i < listaAmigos.size(); i++) {
                datosAmigos[0] = listaAmigos.get(i).getIdusario();
                datosAmigos[1] = listaAmigos.get(i).getNombres();
                datosAmigos[2] = listaAmigos.get(i).getApellidos();
                datosAmigos[3] = listaAmigos.get(i).getDepartamento();
                datosAmigos[4] = amigos.get(i).getEstado();
                modeloTablaAmigos.addRow(datosAmigos);
            }
            tabla_listaAmigos.setModel(modeloTablaAmigos);
            JOptionPane.showMessageDialog(null, "Amigo Bloqueado!");
        } else {
            JOptionPane.showMessageDialog(null, "Error al bloquear el amigo!");
        }

    }//GEN-LAST:event_bt_BloquearActionPerformed

    private void bt_activarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_activarActionPerformed
        // TODO add your handling code here:
        int row = tabla_listaAmigos.getSelectedRow();
        Amigo amigo = new Amigo(perfilAutenticado.getIdusario(), Integer.parseInt(tabla_listaAmigos.getValueAt(row, 0).toString()), "Activo");
        if (controladorCliente.PeticionClienteAmigo("estadoAmigo", amigo) == true) {
            ArrayList<Amigo> amigos = new ArrayList<Amigo>();
            amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
            ArrayList<Perfil> listaAmigos = new ArrayList<Perfil>();
            amigos.stream().forEach((a) -> {
                Perfil perfil = controladorCliente.obtenerPerfil(a.getIdperfilAmigo());
                listaAmigos.add(perfil);
            });
            panel_amigos.setVisible(true);
            panel_perfil.setVisible(false);
            DefaultTableModel modeloTablaAmigos = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaAmigos.addColumn("ID");
            modeloTablaAmigos.addColumn("Nombres");
            modeloTablaAmigos.addColumn("Apellidos");
            modeloTablaAmigos.addColumn("Departamento");
            modeloTablaAmigos.addColumn("Estado");
            Object datosAmigos[] = new Object[5];
            for (int i = 0; i < listaAmigos.size(); i++) {
                datosAmigos[0] = listaAmigos.get(i).getIdusario();
                datosAmigos[1] = listaAmigos.get(i).getNombres();
                datosAmigos[2] = listaAmigos.get(i).getApellidos();
                datosAmigos[3] = listaAmigos.get(i).getDepartamento();
                datosAmigos[4] = amigos.get(i).getEstado();
                modeloTablaAmigos.addRow(datosAmigos);
            }
            tabla_listaAmigos.setModel(modeloTablaAmigos);
            JOptionPane.showMessageDialog(null, "Amigo Activado!");
        } else {
            JOptionPane.showMessageDialog(null, "Error al bloquear el amigo!");
        }
    }//GEN-LAST:event_bt_activarActionPerformed

    private void bt_publicacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_publicacionesActionPerformed
        // TODO add your handling code here:
        panel_amigos.setVisible(false);
        panel_perfil.setVisible(false);
        panel_solicitudes.setVisible(false);
        panel_publicaciones.setVisible(true);
        panel_enviarSolicitud.setVisible(false);
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        ArrayList<Publicacion> publicaciones_amigos = new ArrayList<Publicacion>();
        ArrayList<Amigo> amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
        for (int i = 0; i < amigos.size(); i++) {
            publicaciones = controladorCliente.obtenerPublicacionesAmigos(amigos.get(i).getIdperfilAmigo());
            publicaciones.stream().forEach((p) -> {
                publicaciones_amigos.add(p);
            });
        }
        DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        modeloTablaPublicaciones.addColumn("Nombres");
        modeloTablaPublicaciones.addColumn("Apellidos");
        modeloTablaPublicaciones.addColumn("Texto");
        modeloTablaPublicaciones.addColumn("Multimedia");
        modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
        modeloTablaPublicaciones.addColumn("Tipo");
        modeloTablaPublicaciones.addColumn("Me gusta");
        modeloTablaPublicaciones.addColumn("No me gusta");
        tabla_panel_publicaciones.setModel(modeloTablaPublicaciones);
        tabla_panel_publicaciones.setRowHeight(120);
        tabla_panel_publicaciones.getColumnModel().getColumn(3).setPreferredWidth(150);
        Object datosPublicacion[] = new Object[8];
        Perfil perfil;
        for (int i = 0; i < publicaciones_amigos.size(); i++) {
            try {
                perfil = controladorCliente.obtenerPerfil(publicaciones_amigos.get(i).getIdUsuario());
                datosPublicacion[0] = perfil.getNombres();
                datosPublicacion[1] = perfil.getApellidos();
                datosPublicacion[2] = publicaciones_amigos.get(i).getTexto();
                Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones_amigos.get(i).getMultimedia());
                ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                Image image = icon.getImage();
                image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                ImageIcon icono = new ImageIcon(image);
                tabla_panel_publicaciones.getColumnModel().getColumn(3).setCellRenderer(new ControladorRenderizarCelda());
                datosPublicacion[3] = icono;
                datosPublicacion[4] = publicaciones_amigos.get(i).getFechapublicacion();
                datosPublicacion[5] = publicaciones_amigos.get(i).getTipopublicacion();
                datosPublicacion[6] = publicaciones_amigos.get(i).getMegusta();
                datosPublicacion[7] = publicaciones_amigos.get(i).getNomegusta();
                modeloTablaPublicaciones.addRow(datosPublicacion);
            } catch (Exception ex) {
                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_bt_publicacionesActionPerformed

    private void bt_publicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_publicaActionPerformed
        // TODO add your handling code here:
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
        int row = tabla_publicaciones.getSelectedRow();
        Publicacion publicacion = new Publicacion(publicaciones.get(row).getIdUsuario(), publicaciones.get(row).getTexto(), publicaciones.get(row).getMultimedia(), publicaciones.get(row).getFechapublicacion(), "Publica", publicaciones.get(row).getMegusta(), publicaciones.get(row).getNomegusta());
        publicacion.setIdPublicacion(publicaciones.get(row).getIdPublicacion());
        if (controladorCliente.PeticionClientePublicacion("tipoPublicacion", publicacion) == true) {
            publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_publicaciones.setModel(modeloTablaPublicaciones);
            tabla_publicaciones.setRowHeight(120);
            tabla_publicaciones.getColumnModel().getColumn(1).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[6];
            for (int i = 0; i < publicaciones.size(); i++) {
                try {
                    datosPublicacion[0] = publicaciones.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_publicaciones.getColumnModel().getColumn(1).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[1] = icono;
                    datosPublicacion[2] = publicaciones.get(i).getFechapublicacion();
                    datosPublicacion[3] = publicaciones.get(i).getTipopublicacion();
                    datosPublicacion[4] = publicaciones.get(i).getMegusta();
                    datosPublicacion[5] = publicaciones.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JOptionPane.showMessageDialog(null, "Tipo de publicacion actualizada!.");
        } else {
            JOptionPane.showMessageDialog(null, "Error al actualizar el Tipo de publicacion!.");
        }
    }//GEN-LAST:event_bt_publicaActionPerformed

    private void bt_privadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_privadaActionPerformed
        // TODO add your handling code here:
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
        int row = tabla_publicaciones.getSelectedRow();
        Publicacion publicacion = new Publicacion(publicaciones.get(row).getIdUsuario(), publicaciones.get(row).getTexto(), publicaciones.get(row).getMultimedia(), publicaciones.get(row).getFechapublicacion(), "Privada", publicaciones.get(row).getMegusta(), publicaciones.get(row).getNomegusta());
        publicacion.setIdPublicacion(publicaciones.get(row).getIdPublicacion());
        if (controladorCliente.PeticionClientePublicacion("tipoPublicacion", publicacion) == true) {
            publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_publicaciones.setModel(modeloTablaPublicaciones);
            tabla_publicaciones.setRowHeight(120);
            tabla_publicaciones.getColumnModel().getColumn(1).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[6];
            for (int i = 0; i < publicaciones.size(); i++) {
                try {
                    datosPublicacion[0] = publicaciones.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_publicaciones.getColumnModel().getColumn(1).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[1] = icono;
                    datosPublicacion[2] = publicaciones.get(i).getFechapublicacion();
                    datosPublicacion[3] = publicaciones.get(i).getTipopublicacion();
                    datosPublicacion[4] = publicaciones.get(i).getMegusta();
                    datosPublicacion[5] = publicaciones.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JOptionPane.showMessageDialog(null, "Tipo de publicacion actualizada!.");
        } else {
            JOptionPane.showMessageDialog(null, "Error al actualizar el Tipo de publicacion!.");
        }
    }//GEN-LAST:event_bt_privadaActionPerformed

    private void bt_megustaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_megustaActionPerformed
        // TODO add your handling code here:
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
        int row = tabla_publicaciones.getSelectedRow();
        Publicacion publicacion = new Publicacion(publicaciones.get(row).getIdUsuario(), publicaciones.get(row).getTexto(), publicaciones.get(row).getMultimedia(), publicaciones.get(row).getFechapublicacion(), "Privada", publicaciones.get(row).getMegusta() + 1, publicaciones.get(row).getNomegusta());
        publicacion.setIdPublicacion(publicaciones.get(row).getIdPublicacion());
        if (controladorCliente.PeticionClientePublicacion("meGustas", publicacion) == true) {
            publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_publicaciones.setModel(modeloTablaPublicaciones);
            tabla_publicaciones.setRowHeight(120);
            tabla_publicaciones.getColumnModel().getColumn(1).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[6];
            for (int i = 0; i < publicaciones.size(); i++) {
                try {
                    datosPublicacion[0] = publicaciones.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_publicaciones.getColumnModel().getColumn(1).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[1] = icono;
                    datosPublicacion[2] = publicaciones.get(i).getFechapublicacion();
                    datosPublicacion[3] = publicaciones.get(i).getTipopublicacion();
                    datosPublicacion[4] = publicaciones.get(i).getMegusta();
                    datosPublicacion[5] = publicaciones.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_bt_megustaActionPerformed

    private void bt_nomegustaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_nomegustaActionPerformed
        // TODO add your handling code here:
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
        int row = tabla_publicaciones.getSelectedRow();
        Publicacion publicacion = new Publicacion(publicaciones.get(row).getIdUsuario(), publicaciones.get(row).getTexto(), publicaciones.get(row).getMultimedia(), publicaciones.get(row).getFechapublicacion(), "Privada", publicaciones.get(row).getMegusta(), publicaciones.get(row).getNomegusta() + 1);
        publicacion.setIdPublicacion(publicaciones.get(row).getIdPublicacion());
        if (controladorCliente.PeticionClientePublicacion("meGustas", publicacion) == true) {
            publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_publicaciones.setModel(modeloTablaPublicaciones);
            tabla_publicaciones.setRowHeight(120);
            tabla_publicaciones.getColumnModel().getColumn(1).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[6];
            for (int i = 0; i < publicaciones.size(); i++) {
                try {
                    datosPublicacion[0] = publicaciones.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_publicaciones.getColumnModel().getColumn(1).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[1] = icono;
                    datosPublicacion[2] = publicaciones.get(i).getFechapublicacion();
                    datosPublicacion[3] = publicaciones.get(i).getTipopublicacion();
                    datosPublicacion[4] = publicaciones.get(i).getMegusta();
                    datosPublicacion[5] = publicaciones.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_bt_nomegustaActionPerformed

    private void bt_crearPublicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_crearPublicacionActionPerformed
        // TODO add your handling code here:
        label_imagen.setIcon(null);
        panel_perfil.setVisible(false);
        panel_amigos.setVisible(false);
        panel_publicaciones.setVisible(false);
        panel_solicitudes.setVisible(false);
        panel_crearPublicacion.setVisible(true);
        panel_enviarSolicitud.setVisible(false);
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDateTime now = LocalDateTime.now();
        txt_fechaPublicacion.setText(dtf.format(now));
    }//GEN-LAST:event_bt_crearPublicacionActionPerformed

    private void bt_abrirFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_abrirFileChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.addChoosableFileFilter(new FiltroImagenes());
        jf.setAcceptAllFileFilterUsed(false);
        jf.showOpenDialog(this);
        imagen = jf.getSelectedFile();
        String path = imagen.getAbsolutePath();
        ImageIcon MyImage = new ImageIcon(path);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(label_imagen.getWidth(), label_imagen.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        label_imagen.setIcon(image);
    }//GEN-LAST:event_bt_abrirFileChooserActionPerformed

    private void bt_crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_crearActionPerformed
        try {
            // TODO add your handling code here:
            FileInputStream fis = new FileInputStream(imagen);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            try {
                for (int i; (i = fis.read(buf)) != -1;) {
                    bos.write(buf, 0, i);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            byte[] bytes = bos.toByteArray();
            Publicacion publicacion = new Publicacion(perfilAutenticado.getIdusario(), area_texto.getText(), bytes, null, box_tipoPublicacion.getSelectedItem().toString(), 0, 0);
            if (controladorCliente.PeticionClientePublicacion("crearPublicacion", publicacion) == true) {
                JOptionPane.showMessageDialog(null, "Publicación creada correctamente!");
                area_texto.setText("");
                label_imagen.setIcon(null);
                box_tipoPublicacion.setSelectedIndex(0);
            } else {
                JOptionPane.showMessageDialog(null, "Error al crear la publicación");
            }
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al crear la publicación");
        }


    }//GEN-LAST:event_bt_crearActionPerformed

    private void bt_solicitudesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_solicitudesActionPerformed
        // TODO add your handling code here:
        panel_solicitudes.setVisible(true);
        panel_enviarSolicitud.setVisible(false);
        panel_perfil.setVisible(false);
        panel_amigos.setVisible(false);
        panel_publicaciones.setVisible(false);
        panel_crearPublicacion.setVisible(false);
        ArrayList<SolicitudAmistad> solicitudes = new ArrayList<SolicitudAmistad>();
        solicitudes = controladorCliente.obtenerSolicitudes(perfilAutenticado.getIdusario());
        ArrayList<Perfil> listaAmigos = new ArrayList<Perfil>();
        solicitudes.stream().forEach((a) -> {
            Perfil perfil = controladorCliente.obtenerPerfil(a.getIdUsuarioEmisor());
            listaAmigos.add(perfil);
        });
        DefaultTableModel modeloTablaSolicitudes = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        modeloTablaSolicitudes.addColumn("ID");
        modeloTablaSolicitudes.addColumn("Nombres");
        modeloTablaSolicitudes.addColumn("Apellidos");
        modeloTablaSolicitudes.addColumn("Departamento");
        modeloTablaSolicitudes.addColumn("Estado");
        Object datosSolicitudes[] = new Object[5];
        for (int i = 0; i < listaAmigos.size(); i++) {
            datosSolicitudes[0] = listaAmigos.get(i).getIdusario();
            datosSolicitudes[1] = listaAmigos.get(i).getNombres();
            datosSolicitudes[2] = listaAmigos.get(i).getApellidos();
            datosSolicitudes[3] = listaAmigos.get(i).getDepartamento();
            datosSolicitudes[4] = solicitudes.get(i).getEstado();
            modeloTablaSolicitudes.addRow(datosSolicitudes);
        }
        tabla_solicitudes.setModel(modeloTablaSolicitudes);

    }//GEN-LAST:event_bt_solicitudesActionPerformed

    private void bt_chatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_chatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_chatActionPerformed

    private void bt_aceptarSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_aceptarSolicitudActionPerformed
        // TODO add your handling code here:
        int row = tabla_solicitudes.getSelectedRow();
        ArrayList<SolicitudAmistad> solicitudes = new ArrayList<SolicitudAmistad>();
        solicitudes = controladorCliente.obtenerSolicitudes(perfilAutenticado.getIdusario());
        SolicitudAmistad solicitud_actualizar = new SolicitudAmistad(solicitudes.get(row).getIdUsuarioEmisor(), solicitudes.get(row).getIdUsuarioReceptor(), solicitudes.get(row).getFecha(), "Aceptada");
        controladorCliente.PeticionClienteSolicitud("estadoSolicitud", solicitud_actualizar);
        solicitudes = controladorCliente.obtenerSolicitudes(perfilAutenticado.getIdusario());
        ArrayList<Perfil> listaAmigos = new ArrayList<Perfil>();
        solicitudes.stream().forEach((a) -> {
            Perfil perfil = controladorCliente.obtenerPerfil(a.getIdUsuarioReceptor());
            listaAmigos.add(perfil);
        });
        DefaultTableModel modeloTablaSolicitudes = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        modeloTablaSolicitudes.addColumn("ID");
        modeloTablaSolicitudes.addColumn("Nombres");
        modeloTablaSolicitudes.addColumn("Apellidos");
        modeloTablaSolicitudes.addColumn("Departamento");
        modeloTablaSolicitudes.addColumn("Estado");
        Object datosSolicitudes[] = new Object[5];
        for (int i = 0; i < listaAmigos.size(); i++) {
            datosSolicitudes[0] = listaAmigos.get(i).getIdusario();
            datosSolicitudes[1] = listaAmigos.get(i).getNombres();
            datosSolicitudes[2] = listaAmigos.get(i).getApellidos();
            datosSolicitudes[3] = listaAmigos.get(i).getDepartamento();
            datosSolicitudes[4] = solicitudes.get(i).getEstado();
            modeloTablaSolicitudes.addRow(datosSolicitudes);
        }
        tabla_solicitudes.setModel(modeloTablaSolicitudes);
    }//GEN-LAST:event_bt_aceptarSolicitudActionPerformed

    private void bt_rechazarSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_rechazarSolicitudActionPerformed
        // TODO add your handling code here:
        int row = tabla_solicitudes.getSelectedRow();
        ArrayList<SolicitudAmistad> solicitudes = new ArrayList<SolicitudAmistad>();
        solicitudes = controladorCliente.obtenerSolicitudes(perfilAutenticado.getIdusario());
        SolicitudAmistad solicitud_actualizar = new SolicitudAmistad(solicitudes.get(row).getIdUsuarioEmisor(), solicitudes.get(row).getIdUsuarioReceptor(), solicitudes.get(row).getFecha(), "Rechazada");
        controladorCliente.PeticionClienteSolicitud("estadoSolicitud", solicitud_actualizar);
        solicitudes = controladorCliente.obtenerSolicitudes(perfilAutenticado.getIdusario());
        ArrayList<Perfil> listaAmigos = new ArrayList<Perfil>();
        solicitudes.stream().forEach((a) -> {
            Perfil perfil = controladorCliente.obtenerPerfil(a.getIdUsuarioReceptor());
            listaAmigos.add(perfil);
        });
        DefaultTableModel modeloTablaSolicitudes = new DefaultTableModel() {
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        modeloTablaSolicitudes.addColumn("ID");
        modeloTablaSolicitudes.addColumn("Nombres");
        modeloTablaSolicitudes.addColumn("Apellidos");
        modeloTablaSolicitudes.addColumn("Departamento");
        modeloTablaSolicitudes.addColumn("Estado");
        Object datosSolicitudes[] = new Object[5];
        for (int i = 0; i < listaAmigos.size(); i++) {
            datosSolicitudes[0] = listaAmigos.get(i).getIdusario();
            datosSolicitudes[1] = listaAmigos.get(i).getNombres();
            datosSolicitudes[2] = listaAmigos.get(i).getApellidos();
            datosSolicitudes[3] = listaAmigos.get(i).getDepartamento();
            datosSolicitudes[4] = solicitudes.get(i).getEstado();
            modeloTablaSolicitudes.addRow(datosSolicitudes);
        }
        tabla_solicitudes.setModel(modeloTablaSolicitudes);
    }//GEN-LAST:event_bt_rechazarSolicitudActionPerformed

    private void bt_nomegusta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_nomegusta1ActionPerformed
        // TODO add your handling code here:
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        ArrayList<Publicacion> publicaciones_amigos = new ArrayList<Publicacion>();
        ArrayList<Amigo> amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
        for (int i = 0; i < amigos.size(); i++) {
            publicaciones = controladorCliente.obtenerPublicacionesAmigos(amigos.get(i).getIdperfilAmigo());
            publicaciones.stream().forEach((p) -> {
                publicaciones_amigos.add(p);
            });
        }
        int row = tabla_panel_publicaciones.getSelectedRow();
        Publicacion publicacion = new Publicacion(publicaciones_amigos.get(row).getIdUsuario(), publicaciones_amigos.get(row).getTexto(), publicaciones_amigos.get(row).getMultimedia(), publicaciones_amigos.get(row).getFechapublicacion(), publicaciones_amigos.get(row).getTipopublicacion(), publicaciones_amigos.get(row).getMegusta(), publicaciones_amigos.get(row).getNomegusta() + 1);
        publicacion.setIdPublicacion(publicaciones_amigos.get(row).getIdPublicacion());
        if (controladorCliente.PeticionClientePublicacion("meGustas", publicacion) == true) {
            publicaciones_amigos.clear();
            amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
            for (int i = 0; i < amigos.size(); i++) {
                publicaciones = controladorCliente.obtenerPublicacionesAmigos(amigos.get(i).getIdperfilAmigo());
                publicaciones.stream().forEach((p) -> {
                    publicaciones_amigos.add(p);
                });
            }
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Nombres");
            modeloTablaPublicaciones.addColumn("Apellidos");
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_panel_publicaciones.setModel(modeloTablaPublicaciones);
            tabla_panel_publicaciones.setRowHeight(120);
            tabla_panel_publicaciones.getColumnModel().getColumn(3).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[8];
            Perfil perfil;
            for (int i = 0; i < publicaciones_amigos.size(); i++) {
                try {
                    perfil = controladorCliente.obtenerPerfil(publicaciones_amigos.get(i).getIdUsuario());
                    datosPublicacion[0] = perfil.getNombres();
                    datosPublicacion[1] = perfil.getApellidos();
                    datosPublicacion[2] = publicaciones_amigos.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones_amigos.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_panel_publicaciones.getColumnModel().getColumn(3).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[3] = icono;
                    datosPublicacion[4] = publicaciones_amigos.get(i).getFechapublicacion();
                    datosPublicacion[5] = publicaciones_amigos.get(i).getTipopublicacion();
                    datosPublicacion[6] = publicaciones_amigos.get(i).getMegusta();
                    datosPublicacion[7] = publicaciones_amigos.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_bt_nomegusta1ActionPerformed

    private void bt_megusta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_megusta1ActionPerformed
        // TODO add your handling code here:
        ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
        ArrayList<Publicacion> publicaciones_amigos = new ArrayList<Publicacion>();
        ArrayList<Amigo> amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
        for (int i = 0; i < amigos.size(); i++) {
            publicaciones = controladorCliente.obtenerPublicacionesAmigos(amigos.get(i).getIdperfilAmigo());
            publicaciones.stream().forEach((p) -> {
                publicaciones_amigos.add(p);
            });
        }
        int row = tabla_panel_publicaciones.getSelectedRow();
        Publicacion publicacion = new Publicacion(publicaciones_amigos.get(row).getIdUsuario(), publicaciones_amigos.get(row).getTexto(), publicaciones_amigos.get(row).getMultimedia(), publicaciones_amigos.get(row).getFechapublicacion(), publicaciones_amigos.get(row).getTipopublicacion(), publicaciones_amigos.get(row).getMegusta() + 1, publicaciones_amigos.get(row).getNomegusta());
        publicacion.setIdPublicacion(publicaciones_amigos.get(row).getIdPublicacion());
        if (controladorCliente.PeticionClientePublicacion("meGustas", publicacion) == true) {
            publicaciones_amigos.clear();
            amigos = controladorCliente.obtenerAmigos(perfilAutenticado.getIdusario());
            for (int i = 0; i < amigos.size(); i++) {
                publicaciones = controladorCliente.obtenerPublicacionesAmigos(amigos.get(i).getIdperfilAmigo());
                publicaciones.stream().forEach((p) -> {
                    publicaciones_amigos.add(p);
                });
            }
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Nombres");
            modeloTablaPublicaciones.addColumn("Apellidos");
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_panel_publicaciones.setModel(modeloTablaPublicaciones);
            tabla_panel_publicaciones.setRowHeight(120);
            tabla_panel_publicaciones.getColumnModel().getColumn(3).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[8];
            Perfil perfil;
            for (int i = 0; i < publicaciones_amigos.size(); i++) {
                try {
                    perfil = controladorCliente.obtenerPerfil(publicaciones_amigos.get(i).getIdUsuario());
                    datosPublicacion[0] = perfil.getNombres();
                    datosPublicacion[1] = perfil.getApellidos();
                    datosPublicacion[2] = publicaciones_amigos.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones_amigos.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_panel_publicaciones.getColumnModel().getColumn(3).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[3] = icono;
                    datosPublicacion[4] = publicaciones_amigos.get(i).getFechapublicacion();
                    datosPublicacion[5] = publicaciones_amigos.get(i).getTipopublicacion();
                    datosPublicacion[6] = publicaciones_amigos.get(i).getMegusta();
                    datosPublicacion[7] = publicaciones_amigos.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_bt_megusta1ActionPerformed

    private void bt_buscarPerfilSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_buscarPerfilSolicitudActionPerformed
        // TODO add your handling code here:
        try {
            Perfil perfil = controladorCliente.obtenerPerfil(Integer.parseInt(txt_idUsuarioSolicitud.getText()));
            DefaultTableModel modeloTablaPerfil = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            tabla_enviar_solicitud.setModel(modeloTablaPerfil);
            modeloTablaPerfil.addColumn("Nombres");
            modeloTablaPerfil.addColumn("Apellidos");
            modeloTablaPerfil.addColumn("Departamento");
            modeloTablaPerfil.addColumn("Descripcion");
            Object datosPerfil[] = new Object[4];
            datosPerfil[0] = perfil.getNombres();
            datosPerfil[1] = perfil.getApellidos();
            datosPerfil[2] = perfil.getDepartamento();
            datosPerfil[3] = perfil.getDescripcion();
            modeloTablaPerfil.addRow(datosPerfil);
            ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
            publicaciones = controladorCliente.obtenerPublicacionesAmigos(Integer.parseInt(txt_idUsuarioSolicitud.getText()));
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_publicacionesEnviarSolicitud.setModel(modeloTablaPublicaciones);
            tabla_publicacionesEnviarSolicitud.setRowHeight(120);
            tabla_publicacionesEnviarSolicitud.getColumnModel().getColumn(1).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[6];
            for (int i = 0; i < publicaciones.size(); i++) {
                try {
                    datosPublicacion[0] = publicaciones.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_publicacionesEnviarSolicitud.getColumnModel().getColumn(1).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[1] = icono;
                    datosPublicacion[2] = publicaciones.get(i).getFechapublicacion();
                    datosPublicacion[3] = publicaciones.get(i).getTipopublicacion();
                    datosPublicacion[4] = publicaciones.get(i).getMegusta();
                    datosPublicacion[5] = publicaciones.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception ex) {
            tabla_publicacionesEnviarSolicitud.setModel(new DefaultTableModel());
        }


    }//GEN-LAST:event_bt_buscarPerfilSolicitudActionPerformed

    private void bt_EnviarSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_EnviarSolicitudActionPerformed
        // TODO add your handling code here:
        panel_enviarSolicitud.setVisible(true);
        panel_perfil.setVisible(false);
        panel_amigos.setVisible(false);
        panel_publicaciones.setVisible(false);
        panel_solicitudes.setVisible(false);
        panel_crearPublicacion.setVisible(false);
    }//GEN-LAST:event_bt_EnviarSolicitudActionPerformed

    private void txt_idUsuarioSolicitudKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_idUsuarioSolicitudKeyPressed
        // TODO add your handling code here:


    }//GEN-LAST:event_txt_idUsuarioSolicitudKeyPressed

    private void txt_idUsuarioSolicitudKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_idUsuarioSolicitudKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_idUsuarioSolicitudKeyTyped

    private void bt_enviarSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_enviarSolicitudActionPerformed
        // TODO add your handling code here:
        SolicitudAmistad solicitudAmistad;
        Perfil perfil;
        perfil = controladorCliente.obtenerPerfil(Integer.parseInt(txt_idUsuarioSolicitud.getText()));
        solicitudAmistad = new SolicitudAmistad(perfilAutenticado.getIdusario(), perfil.getIdusario(), perfil.getFechanacimiento(), "En Espera");
        controladorCliente.PeticionClienteSolicitud("enviarSolicitud", solicitudAmistad);
        JOptionPane.showMessageDialog(null, "Solicitud de amistad enviada!");
        tabla_enviar_solicitud.setModel(new DefaultTableModel());
        tabla_publicacionesEnviarSolicitud.setModel(new DefaultTableModel());
        txt_idUsuarioSolicitud.setText("");
    }//GEN-LAST:event_bt_enviarSolicitudActionPerformed

    private void bt_cambiarfotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cambiarfotoActionPerformed
        // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.addChoosableFileFilter(new FiltroImagenes());
        jf.setAcceptAllFileFilterUsed(false);
        jf.showOpenDialog(this);
        imagen = jf.getSelectedFile();
        String path = imagen.getAbsolutePath();
        ImageIcon MyImage = new ImageIcon(path);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(label_fotoPerfil_perfil.getWidth(), label_fotoPerfil_perfil.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        label_fotoPerfil_perfil.setIcon(image);
    }//GEN-LAST:event_bt_cambiarfotoActionPerformed

    private void bt_eliminarPublicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_eliminarPublicacionActionPerformed
        // TODO add your handling code here:
        ArrayList<Publicacion> p = new ArrayList<Publicacion>();
        p = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
        int row = tabla_publicaciones.getSelectedRow();
        Publicacion publicacion = new Publicacion(p.get(row).getIdUsuario(), p.get(row).getTexto(), p.get(row).getMultimedia(), p.get(row).getFechapublicacion(), p.get(row).getTipopublicacion(), p.get(row).getMegusta(), p.get(row).getNomegusta());
        publicacion.setIdPublicacion(p.get(row).getIdPublicacion());
        if (controladorCliente.PeticionClientePublicacion("eliminarPublicacion", publicacion) == true) {
            JOptionPane.showMessageDialog(null, "Publicacion eliminada correctamente!");
            ArrayList<Publicacion> publicaciones = new ArrayList<Publicacion>();
            publicaciones = controladorCliente.obtenerPublicaciones(perfilAutenticado.getIdusario());
            DefaultTableModel modeloTablaPublicaciones = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };
            modeloTablaPublicaciones.addColumn("Texto");
            modeloTablaPublicaciones.addColumn("Multimedia");
            modeloTablaPublicaciones.addColumn("Fecha de Publicacion");
            modeloTablaPublicaciones.addColumn("Tipo");
            modeloTablaPublicaciones.addColumn("Me gusta");
            modeloTablaPublicaciones.addColumn("No me gusta");
            tabla_publicaciones.setModel(modeloTablaPublicaciones);
            tabla_publicaciones.setRowHeight(120);
            tabla_publicaciones.getColumnModel().getColumn(1).setPreferredWidth(150);
            Object datosPublicacion[] = new Object[6];
            for (int i = 0; i < publicaciones.size(); i++) {
                try {
                    datosPublicacion[0] = publicaciones.get(i).getTexto();
                    Blob blob = new javax.sql.rowset.serial.SerialBlob(publicaciones.get(i).getMultimedia());
                    ImageIcon icon = new ImageIcon(controladorImagen.descargarImagen(blob));
                    Image image = icon.getImage();
                    image.getScaledInstance(5, 5, Image.SCALE_DEFAULT);
                    ImageIcon icono = new ImageIcon(image);
                    tabla_publicaciones.getColumnModel().getColumn(1).setCellRenderer(new ControladorRenderizarCelda());
                    datosPublicacion[1] = icono;
                    datosPublicacion[2] = publicaciones.get(i).getFechapublicacion();
                    datosPublicacion[3] = publicaciones.get(i).getTipopublicacion();
                    datosPublicacion[4] = publicaciones.get(i).getMegusta();
                    datosPublicacion[5] = publicaciones.get(i).getNomegusta();
                    modeloTablaPublicaciones.addRow(datosPublicacion);
                } catch (Exception ex) {
                    Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error al eliminar la publicacion");
        }
    }//GEN-LAST:event_bt_eliminarPublicacionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area_descripcion;
    private javax.swing.JTextArea area_texto;
    private javax.swing.JComboBox<String> box_departamento;
    private javax.swing.JComboBox<String> box_sexo;
    private javax.swing.JComboBox<String> box_tipoPublicacion;
    private javax.swing.JButton bt_Bloquear;
    private javax.swing.JButton bt_EnviarSolicitud;
    private javax.swing.JButton bt_abrirFileChooser;
    private javax.swing.JButton bt_aceptarSolicitud;
    private javax.swing.JButton bt_activar;
    private javax.swing.JButton bt_actualizarDatos;
    private javax.swing.JButton bt_amigos;
    private javax.swing.JButton bt_buscarPerfilSolicitud;
    private javax.swing.JButton bt_cambiarfoto;
    private javax.swing.JButton bt_chat;
    private javax.swing.JButton bt_crear;
    private javax.swing.JButton bt_crearPublicacion;
    private javax.swing.JButton bt_eliminarPerfil;
    private javax.swing.JButton bt_eliminarPublicacion;
    private javax.swing.JButton bt_enviarSolicitud;
    private javax.swing.JButton bt_guardarCambios;
    private javax.swing.JButton bt_megusta;
    private javax.swing.JButton bt_megusta1;
    private javax.swing.JButton bt_mostrarPassword;
    private javax.swing.JButton bt_nomegusta;
    private javax.swing.JButton bt_nomegusta1;
    private javax.swing.JButton bt_perfil;
    private javax.swing.JButton bt_privada;
    private javax.swing.JButton bt_publica;
    private javax.swing.JButton bt_publicaciones;
    private javax.swing.JButton bt_rechazarSolicitud;
    private javax.swing.JButton bt_solicitudes;
    private com.toedter.calendar.JDateChooser fecha_nacimiento;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel labe_cedula;
    private javax.swing.JLabel label_amigos;
    private javax.swing.JLabel label_apellidos;
    private javax.swing.JLabel label_apellidos1;
    private javax.swing.JLabel label_celular;
    private javax.swing.JLabel label_crearPublicacion;
    private javax.swing.JLabel label_departamento;
    private javax.swing.JLabel label_descripcion;
    private javax.swing.JLabel label_enviarSolicitud;
    private javax.swing.JLabel label_enviarSolicitud1;
    private javax.swing.JLabel label_fechaNacimiento;
    private javax.swing.JLabel label_fotoPerfil;
    private javax.swing.JLabel label_fotoPerfil_perfil;
    private javax.swing.JLabel label_imagen;
    private javax.swing.JLabel label_lista_amigos;
    private javax.swing.JLabel label_lista_amigos1;
    private javax.swing.JLabel label_lista_amigos2;
    private javax.swing.JLabel label_lista_amigos3;
    private javax.swing.JLabel label_nombres;
    private javax.swing.JLabel label_nombres1;
    private javax.swing.JLabel label_password;
    private javax.swing.JLabel label_sexo;
    private javax.swing.JLabel label_solicitudes;
    private javax.swing.JLabel label_solicitudes2;
    private javax.swing.JLabel label_texto;
    private javax.swing.JLabel label_texto1;
    private javax.swing.JLabel label_texto2;
    private javax.swing.JLabel label_textoImagen;
    private javax.swing.JMenuItem menu_cerrarSesion;
    private javax.swing.JMenuItem menu_salir;
    private javax.swing.JPanel panel_amigos;
    private javax.swing.JPanel panel_botones;
    private javax.swing.JPanel panel_crearPublicacion;
    private javax.swing.JPanel panel_enviarSolicitud;
    private javax.swing.JPanel panel_perfil;
    private javax.swing.JPanel panel_publicaciones;
    private javax.swing.JPanel panel_solicitudes;
    private javax.swing.JPasswordField pass_password;
    private javax.swing.JTable tabla_enviar_solicitud;
    private javax.swing.JTable tabla_listaAmigos;
    private javax.swing.JTable tabla_panel_publicaciones;
    private javax.swing.JTable tabla_publicaciones;
    private javax.swing.JTable tabla_publicacionesEnviarSolicitud;
    private javax.swing.JTable tabla_solicitudes;
    private javax.swing.JTextField txt_apellidos;
    private javax.swing.JTextField txt_celular;
    private javax.swing.JTextField txt_fechaPublicacion;
    private javax.swing.JTextField txt_idUsuario;
    private javax.swing.JTextField txt_idUsuarioSolicitud;
    private javax.swing.JTextField txt_nombres;
    // End of variables declaration//GEN-END:variables
}
